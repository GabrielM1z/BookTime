services:
  postgres:
    image: postgres:latest
    container_name: postgres_db
    ports:
      - 5432:5432
    env_file: ".env"
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - backend

  keycloak:
    build: ./keycloak
    command: start-dev
    environment:
      KC_HOSTNAME: keycloak
      KC_HOSTNAME_STRICT: false
      KC_HOSTNAME_STRICT_HTTPS: false

      KC_HEALTH_ENABLED: true
      KC_METRICS_ENABLED: true
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}

      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/keycloak_db
      KC_DB_USERNAME: ${DB_USER}
      KC_DB_PASSWORD: ${DB_PASSWORD}
    ports:
      - 8080:8080
    volumes:
      - ./keycloak:/opt/keycloak/data/import
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "exec 3<>/dev/tcp/127.0.0.1/9000;echo -e 'GET /health/ready HTTP/1.1\r

            host: http://localhost\r

            Connection: close\r

            \r

            ' >&3;if [ $? -eq 0 ]; then echo 'Healthcheck Successful';exit 0;else echo 'Healthcheck Failed';exit 1;fi;"
        ]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - postgres
    restart: always
    env_file: ".env"
    networks:
      - backend

  api_books:
    container_name: api_books
    build: ./book
    ports:
      - 8083:8080
    restart: always
    environment:
      DB_HOST: postgres
      DB_NAME: book_db
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
    volumes:
      - api_volume:/usr/src/app/
    depends_on:
      - postgres
    networks:
      - backend

  api_gateway:
    container_name: api_gateway
    build: ./gateway
    ports:
      - 8082:8080
    restart: always
    volumes:
      - api_volume:/usr/src/app/
    networks:
      - backend
    depends_on:
      keycloak:
        condition: service_healthy

  migrate:
    image: migrate/migrate:v4.15.2
    profiles: [ "tools" ]
    volumes:
      - ./migrations:/migrations
    entrypoint: [ "migrate", "-path", "/migrations", "-database", "postgres://postgres:postgres123@postgres:5432/booktime_book?sslmode=disable" ]
    command: [ "up" ]
    depends_on:
      postgres:
        condition: service_healthy
    restart: on-failure

volumes:
  postgres_data:
  api_volume:


networks:
  backend:
    driver: bridge
